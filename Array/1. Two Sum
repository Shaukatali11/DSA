1. Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Test case:-
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. 



Approach-1 ...
We are just tying to find the index whose value sum is equal to target, because we known only one solution exist for every testcase
and store into vector and then return that vector.

// In this case TC is O(n^2).

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {


        vector<int>result;
        int n =nums.size();
        for(int i=0 ; i<n ; i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]+nums[j]==target){
                    result.push_back(i);
                    result.push_back(j);
                }
            }
        }
        return result;
}
};



Approach-2 ...
we use hashing technique to optimized this.


class Solution{
     public:
     vector<int> twoSum(vector<int>& nums, int target){
         unordered_map<int,int> ump;
         for(int i=0; i<nums.size() ; i++){
             int rem=target-nums[i];

             if(ump.find(rem) != ump.end()){
                 return {ump[rem] , i};
             }
             ump[nums[i]]=i;
         }
         return {};
     }

 };


