#include <bits/stdc++.h>
using namespace std;

void bfs(int start, vector<vector<int>>& adjList, vector<bool>& visited) {
    queue<int> q;
    q.push(start);
    visited[start] = true;
    
    while (!q.empty()) {
        int vertex = q.front();
        q.pop();
        cout << vertex << " ";
        
        for (int neighbor : adjList[vertex]) {
            if (!visited[neighbor]) {
                q.push(neighbor);
                visited[neighbor] = true;
            }
        }
    }
}

int main() {
    int vertex;
    cout << "Enter number of vertices: " << endl;
    cin >> vertex;
    
    vector<vector<int>> adjList(vertex);
    
    int edge;
    cout << "Enter number of edges: " << endl;
    cin >> edge;
    
    int u, v;
    cout << "Enter the edges (u v): " << endl;
    for (int i = 0; i < edge; i++) {
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u); // Assuming it's an undirected graph
    }
    
    vector<bool> visited(vertex, false);
    cout << "BFS Traversal starting from vertex 0: " << endl;
    bfs(0, adjList, visited); // Starting BFS from vertex 0

    return 0;
}
