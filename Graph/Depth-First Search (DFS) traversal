#include <bits/stdc++.h>
using namespace std;

void dfs(int vertex, vector<vector<int>>& adjList, vector<bool>& visited) {
    visited[vertex] = true;
    cout << vertex << " ";
    
    for (int neighbor : adjList[vertex]) {
        if (!visited[neighbor]) {
            dfs(neighbor, adjList, visited);
        }
    }
}

int main() {
    int vertex;
    cout << "Enter number of vertices: " << endl;
    cin >> vertex;
    
    vector<vector<int>> adjList(vertex);
    
    int edge;
    cout << "Enter number of edges: " << endl;
    cin >> edge;
    
    int u, v;
    cout << "Enter the edges (u v): " << endl;
    for (int i = 0; i < edge; i++) {
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u); // Assuming it's an undirected graph
    }
    
    vector<bool> visited(vertex, false);
    cout << "DFS Traversal starting from vertex 0: " << endl;
    dfs(0, adjList, visited); // Starting DFS from vertex 0

    return 0;
}
